# Throughout this project, the use of data structures are not permitted 
# Minimal built in functions are to be used and the majority of functions must be
# created yourself

# More packages may be imported in the space below if approved by your instructor 

def printMenu():
    print('''
          Customer and Sales System\n
          1. Enter Customer Information\n
          2. Generate Customer data file\n
          3. Report on total Sales (Not done in this part)\n
          4. Check for fraud in sales data (Not done in this part)\n
          9. Quit\n
          Enter menu option (1-9)
          ''')

'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
# Mirhan
def enterCustomerInfo():
    first_name = input("Enter your first name: ")
    last_name = input("Enter your last name: ")
    city = input("Enter what city you live in: ")
    postal_code = input("Enter your postal code: ") 
    
    credit_card_number = credit_card_input()
    
    return first_name, last_name, city, credit_card_number, postal_code

def credit_card_input(): 
    
    while True: 
        credit_card_number = input("Enter your credit card number: ")
        if len(credit_card_number) <=19 and len(credit_card_number) >= 9 and credit_card_number.isdigit():

            if validateCreditCard(credit_card_number): 
                print("This credit card is valid.")
                return credit_card_number
            else: 
                print("This credit card is not valid.")
        else: 
            print("Please type in your entire credit card number. (Only Numbers)")

'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
# Michelle
def validatePostalCode():
    try:
        with open("postal_codes.csv", "r") as file:
            postal_codes = [line.strip().split('|')[0] for line in file]
    except FileNotFoundError:
        print("Error: postal_codes.csv file not found.")
        return False

    # Get user input
    postal_code = input("Enter the postal code to validate: ").strip()

    if len(postal_code) < 3:
        print("Invalid: Postal code must be at least 3 characters long.")
        return False

    if postal_code[:3] not in postal_codes:
        print("Invalid: Postal code prefix does not match any known postal codes.")
        return False

    print("Valid postal code.")
    return True

validatePostalCode()


'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
# Mirhan
def validateCreditCard(credit_card_number): 
    
    credit_card_number = [int(digit) for digit in credit_card_number]
    
    check_digit = credit_card_number.pop(-1)
    
    credit_card_number.reverse()
    
    for idx in range(len(credit_card_number)):
        if idx % 2 == 0: 
            credit_card_number[idx] *= 2 
            if credit_card_number[idx] > 9: 
                credit_card_number[idx] -= 9

    credit_card_number.append(check_digit)
    
    checksum = sum(credit_card_number)
    
    return checksum % 10 == 0
    

'''
    This function is to be edited to achieve the task.
    It is your decision to make this function a procedural or functional type
    You may place as many or as few parameters as needed
    This function may also be broken down further depending on your algorithm/approach
'''
# Michelle 
def generateCustomerDataFile():
    # Collect customer information
    first_name, last_name, city, credit_card_number, postal_code = enterCustomerInfo()

    file_name = "customer_data.csv"

    try:
        with open(file_name, "a") as file:
            file.write(f"{first_name},{last_name},{city},{postal_code},{credit_card_number}\n")
        print(f"Customer data saved to {file_name}")
    except IOError:
        print("Error: Unable to write to the file.")


    pass    # Remove this pass statement and add your own code below

####################################################################
#       ADDITIONAL METHODS MAY BE ADDED BELOW IF NECESSARY         #
####################################################################




####################################################################
#                            MAIN PROGRAM                          #
#           DO NOT EDIT ANY CODE EXCEPT WHERE INDICATED            #
####################################################################

# Do not edit any of these variables
userInput = ""
enterCustomerOption = "1"
generateCustomerOption = "2"
exitCondition = "9"

# More variables for the main may be declared in the space below


while userInput != exitCondition:
    printMenu()                 # Printing out the main menu
    userInput = input();        # User selection from the menu

    if userInput == enterCustomerOption:
        # Only the line below may be editted based on the parameter list and how you design the method return
        # Any necessary variables may be added to this if section, but nowhere else in the code
        enterCustomerInfo()

    elif userInput == generateCustomerOption: 
        # Only the line below may be editted based on the parameter list and how you design the method return
        generateCustomerDataFile()

    else:
        print("Please type in a valid option (A number from 1-9)")

#Exits once the user types 
print("Program Terminated")
